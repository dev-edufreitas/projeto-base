services:
  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_API_URL=${VITE_API_URL}
      - VITE_APP_NAME=${VITE_APP_NAME}
      - VITE_APP_ENV=${VITE_APP_ENV}
      - VITE_APP_DEBUG=${VITE_APP_DEBUG}
    depends_on:
      - backend
    networks:
      - projeto_network
    restart: unless-stopped

  # Backend Laravel
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/var/www/html
      - ../.env:/var/www/.env:ro
      - backend_vendor:/var/www/html/vendor
    environment:
      # Laravel App variables
      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_URL=${APP_URL}
      - APP_LOCALE=${APP_LOCALE}
      - APP_FALLBACK_LOCALE=${APP_FALLBACK_LOCALE}
      - APP_FAKER_LOCALE=${APP_FAKER_LOCALE}
      # Database variables
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      # Session and Cache
      - SESSION_DRIVER=${SESSION_DRIVER}
      - SESSION_LIFETIME=${SESSION_LIFETIME}
      - CACHE_STORE=${CACHE_STORE}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      # Logs
      - LOG_CHANNEL=${LOG_CHANNEL}
      - LOG_STACK=${LOG_STACK}
      - LOG_LEVEL=${LOG_LEVEL}
      # Variáveis de automação do setup
      - FORCE_COMPOSER_INSTALL=true
      - RUN_SEEDERS=true
      - FORCE_GRAPHQL_PUBLISH=true
    depends_on:
      - postgres
    networks:
      - projeto_network
    restart: unless-stopped

  # Banco PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - projeto_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/var/www/html/public
    depends_on:
      - backend
    networks:
      - projeto_network

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
  backend_vendor:
    name: ${COMPOSE_PROJECT_NAME}_backend_vendor
  frontend_node_modules:  
    name: ${COMPOSE_PROJECT_NAME}_frontend_node_modules

networks:
  projeto_network:
    name: ${COMPOSE_PROJECT_NAME}_network
    driver: bridge